#include config
#include utils

local bird = getObjectFromGUID(BIRD_GUID)
local nesburgh = getObjectFromGUID(NESBURGH_GUID)
nesburgh:setVar("fly_coroutine_running", false)


function onLoad()
  bird.interactable = false
  bird.AssetBundle:playLoopingEffect(2)
  bird:setInvisibleTo(Player:getColors())
  self.createButton({
    click_function = "fly",
    function_owner = self,
    position       = {0, 0.1, 0},
    width          = 600,
    height         = 600,
    color          = {0, 0, 0, 0},
    tooltip        = "Fly to " .. self:getName()
  })
end

function fly(_, player_colour)
  local trainer_token = get_trainer_token(player_colour)
  if not trainer_token then
    return
  end

  function fly_coroutine()
    nesburgh:setVar("fly_coroutine_running", true)
    local initial_pos = trainer_token:getPosition()
    local target_pos = self:getPosition() + Vector(0, 0.1, 0)
    local nesburgh_pos = nesburgh:getPosition()

    -- Initial
    bird:setInvisibleTo({})
    bird:setPosition(nesburgh_pos)
    bird:setRotation(Vector(0, (initial_pos - nesburgh_pos):heading("y"), 0))
    -- Pickup
    bird:setPositionSmooth(initial_pos, false, false)
    while bird:isSmoothMoving() do coroutine.yield(0) end
    -- Flight
    bird:setRotationSmooth(Vector(0, (target_pos - initial_pos):heading("y"), 0), false, true)
    while bird:isSmoothMoving() do coroutine.yield(0) end
    bird:setPositionSmooth(target_pos, false, false)
    trainer_token:setPositionSmooth(target_pos, false, false)
    while bird:isSmoothMoving() do coroutine.yield(0) end
    trainer_token:call("onDrop")
    -- Dropoff
    bird:setRotationSmooth(Vector(0, (nesburgh_pos - target_pos):heading("y"), 0), false, true)
    while bird:isSmoothMoving() do coroutine.yield(0) end
    bird:setPositionSmooth(nesburgh_pos, false, false)
    while bird:isSmoothMoving() do coroutine.yield(0) end
    bird:setInvisibleTo(Player:getColors())
    nesburgh:setVar("fly_coroutine_running", false)
    return 1
  end
  if not nesburgh:getVar("fly_coroutine_running") then
    startLuaCoroutine(self, "fly_coroutine")
  else
    print("Someone is already flying (if they are not, reloading the game should fix it).")
  end
end
