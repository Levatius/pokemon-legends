battle_token_events = {}

function battle_token_events._get_zones(battle_token_zone, battle_token)
  local active_zone = getObjectFromGUID(battle_token_zone:getVar("active_zone_guid"))
  local party_zone = getObjectFromGUID(battle_token_zone:getVar("party_zone_guid"))
  local source_zone = getObjectFromGUID(battle_token:getVar("source_zone_guid"))
  -- If the battle token does not explicitly specify a source zone
  if not source_zone then
    if battle_token:hasTag(LEGENDARY_TAG) then
      source_zone = getObjectFromGUID(ENCOUNTER_SPECIAL_ZONE)
    else
      source_zone = getObjectFromGUID(ENCOUNTER_REGULAR_ZONE)
    end
  end
  return active_zone, party_zone, source_zone
end

function battle_token_events._get_encounter(battle_token, source_zone, target_zone)
  -- Get tags from battle token
  local biome_tag = get_biome_tag(battle_token:getTags())
  local climate_tag = get_climate_tag(battle_token:getTags())
  local tier_tag = get_tier_tag(battle_token:getTags())
  -- Query the source zone deck for cards
  local object_infos = get_object_infos_from_zone_deck(source_zone)
  while tier_tag do
    for _, object_info in pairs(object_infos) do
      local matched = true
      if biome_tag   and not contains(object_info.tags, biome_tag)   then matched = false end
      if climate_tag and not contains(object_info.tags, climate_tag) then matched = false end
      if tier_tag    and not contains(object_info.tags, tier_tag)    then matched = false end
      if (biome_tag or climate_tag) and matched then
        return take_object_from_zone_deck(source_zone, {
          position = target_zone:getPosition(),
          rotation = target_zone:getRotation(),
          guid     = object_info.guid
        })
      end
    end
    -- If we cannot find an encounter of the correct tier, try a lower tier
    local tier_tag_index = find_first_index(TIER_TAGS, tier_tag)
    tier_tag = TIER_TAGS[tier_tag_index - 1]
  end
  print("No encounter found for this area")
end

function battle_token_events.on_enter_zone(battle_token_zone, battle_token)
  local active_zone, party_zone, source_zone = battle_token_events._get_zones(battle_token_zone, battle_token)

  if #active_zone:getObjects() > 0 or #party_zone:getObjects() > 0 then
    print("Zones on this side of the arena are occupied")
    return
  end

  if battle_token:hasTag(FULL_PARTY_TAG) then

    function local_coroutine()
      for _, pokemon_card in ipairs(source_zone:getObjects()) do
        put_object_into_zone_deck(party_zone, pokemon_card)
        brief_pause()
      end
      motion_pause()
      party_zone.LayoutZone:layout()
      return 1
    end
    startLuaCoroutine(self, "local_coroutine")

  elseif battle_token:hasTag(HALF_PARTY_TAG) then

    function local_coroutine()
      for i = 0, 2 do
        battle_token_events._get_encounter(battle_token, source_zone, party_zone)
        brief_pause()
      end
      motion_pause()
      party_zone.LayoutZone:layout()
      return 1
    end
    startLuaCoroutine(self, "local_coroutine")

  else
    battle_token_events._get_encounter(battle_token, source_zone, active_zone)
  end

  -- local battle_music = WILD_ENCOUNTER_MUSIC
  -- local encounter_found = false
  --
  -- if battle_token:getName() == "Wild Encounter" then
  --   local encounter_object_infos = get_object_infos_from_zone_deck(source_zone)
  --   if not encounter_object_infos then
  --     print("No PokÃ©mon found in deck")
  --     return
  --   end
  --
  --   for _, pokemon_card_info in reversedipairs(encounter_object_infos) do
  --     local tags_in_common = 0
  --     for _, battle_token_tag in pairs(battle_token:getTags()) do
  --       if contains(pokemon_card_info.tags, battle_token_tag) then
  --         tags_in_common = tags_in_common + 1
  --       end
  --     end
  --     if tags_in_common >= 3 then
  --       encounter_found = true
  --       take_object_from_zone_deck(source_zone, {
  --         position = active_zone:getPosition(),
  --         rotation = active_zone:getRotation(),
  --         guid     = pokemon_card_info.guid
  --       })
  --       break
  --     end
  --   end
  -- else
  --   for _, pokemon_card in ipairs(source_zone:getObjects()) do
  --     local position_offset = pokemon_card:getPosition() - source_zone:getPosition()
  --     pokemon_card:setPositionSmooth(party_zone:getPosition() + position_offset, false, true)
  --   end
  --   Wait.frames(function() party_zone.LayoutZone:layout() end, 30)
  -- end
  --
  -- if not encounter_found then print("No encounter found for this area") return end
  -- --battle_token:call("onRotate")
  -- MusicPlayer:setCurrentAudioclip(battle_music)
  -- MusicPlayer:play()
end

function battle_token_events.on_leave_zone(battle_token_zone, battle_token)
  local active_zone, party_zone, source_zone = battle_token_events._get_zones(battle_token_zone, battle_token)

  if source_zone:getGUID() == ENCOUNTER_REGULAR_ZONE then
    source_zone = getObjectFromGUID(ENCOUNTER_SORT_ZONE)
  end

  function local_coroutine()
    local active_pokemon_card = active_zone:getObjects()[1]
    if active_pokemon_card then put_object_into_zone_deck(source_zone, active_pokemon_card) end
    brief_pause()
    for _, pokemon_card in ipairs(party_zone:getObjects()) do
      put_object_into_zone_deck(source_zone, pokemon_card)
      brief_pause()
    end
    motion_pause()
    if source_zone.type == "Layout" then
      source_zone.LayoutZone:layout()
    end
    return 1
  end
  startLuaCoroutine(self, "local_coroutine")

  -- local playlist = MusicPlayer:getPlaylist()
  -- if #playlist > 0 then
  --   local track_index = math.random(1, #playlist)
  --   MusicPlayer:setCurrentAudioclip(playlist[track_index])
  --   MusicPlayer:play()
  -- else
  --   MusicPlayer:pause()
  -- end
end
