battle_token_events = {}

local previous_audio_clip

function battle_token_events._get_zones(battle_token_zone, battle_token)
  local active_zone = getObjectFromGUID(battle_token_zone:getVar("active_zone_guid"))
  local party_zone = getObjectFromGUID(battle_token_zone:getVar("party_zone_guid"))
  local source_zone = getObjectFromGUID(battle_token:getVar("source_zone_guid"))
  -- If the battle token does not explicitly specify a source zone
  if not source_zone then
    if battle_token:hasTag(LEGENDARY_CARD_TAG) then
      source_zone = getObjectFromGUID(ENCOUNTER_SPECIAL_ZONE)
    else
      source_zone = getObjectFromGUID(ENCOUNTER_REGULAR_ZONE)
    end
  end
  return active_zone, party_zone, source_zone
end

function battle_token_events._get_encounter(battle_token, source_zone, target_zone)
  -- Get tags from battle token
  local biome_tag = get_biome_tag(battle_token:getTags())
  local climate_tag = get_climate_tag(battle_token:getTags())
  local tier_tag = get_tier_tag(battle_token:getTags())
  -- Query the source zone deck for cards
  local object_infos = get_object_infos_from_zone_deck(source_zone)
  while tier_tag do
    for _, object_info in pairs(object_infos) do
      local matched = true
      if biome_tag   and not contains(object_info.tags, biome_tag)   then matched = false end
      if climate_tag and not contains(object_info.tags, climate_tag) then matched = false end
      if tier_tag    and not contains(object_info.tags, tier_tag)    then matched = false end
      if contains(object_info.tags, EVENT_ONLY_CARD_TAG)             then matched = false end

      if (biome_tag or climate_tag) and matched then
        return take_object_from_zone_deck(source_zone, {
          position = target_zone:getPosition(),
          rotation = target_zone:getRotation(),
          guid     = object_info.guid
        })
      end
    end
    -- If we cannot find an encounter of the correct tier, try a lower tier
    local tier_tag_index = find_first_index(TIER_TAGS, tier_tag)
    tier_tag = TIER_TAGS[tier_tag_index - 1]
  end
  print("No encounter found for this area")
end

function battle_token_events.on_enter_zone(battle_token_zone, battle_token)
  local active_zone, party_zone, source_zone = battle_token_events._get_zones(battle_token_zone, battle_token)

  if #active_zone:getObjects() > 0 or #party_zone:getObjects() > 0 then
    print("Zones on this side of the arena are occupied")
    return
  end

  if battle_token:hasTag(FULL_PARTY_TAG) then

    function local_coroutine()
      for _, pokemon_card in ipairs(source_zone:getObjects()) do
        put_object_into_zone_deck(party_zone, pokemon_card)
        brief_pause()
      end
      motion_pause()
      party_zone.LayoutZone:layout()
      return 1
    end
    startLuaCoroutine(self, "local_coroutine")

  elseif battle_token:hasTag(HALF_PARTY_TAG) then

    function local_coroutine()
      for i = 0, 2 do
        battle_token_events._get_encounter(battle_token, source_zone, party_zone)
        brief_pause()
      end
      motion_pause()
      party_zone.LayoutZone:layout()
      return 1
    end
    startLuaCoroutine(self, "local_coroutine")

  else
    battle_token_events._get_encounter(battle_token, source_zone, active_zone)
  end

  local music_events
  for _, object in pairs(getObjectsWithTag(MUSIC_EVENTS_TAG)) do
    if not object.is_face_down then
      if     object:getName() == "Standard Music Events" then music_events = STANDARD_MUSIC_EVENTS
      elseif object:getName() == "Ancient Music Events"  then music_events = ANCIENT_MUSIC_EVENTS
      end
      break
    end
  end
  if not music_events then return end

  local music_event
  if     battle_token:hasTag(HALL_OF_ORIGIN_TAG)    then music_event = music_events[5]
  elseif battle_token:hasTag(SPEAR_PILLAR_TAG)      then music_event = music_events[4]
  elseif battle_token:hasTag(LAKE_TAG)              then music_event = music_events[3]
  elseif battle_token:hasTag(LEGENDARY_CARD_TAG)    then music_event = music_events[2]
  elseif not battle_token:hasTag(FULL_PARTY_TAG)    then music_event = music_events[1]
  end
  if not music_event then return end

  previous_audio_clip = MusicPlayer:getCurrentAudioclip()
  MusicPlayer:setCurrentAudioclip(music_event)
  MusicPlayer:play()
end

function battle_token_events.on_leave_zone(battle_token_zone, battle_token)
  local active_zone, party_zone, source_zone = battle_token_events._get_zones(battle_token_zone, battle_token)

  if source_zone:getGUID() == ENCOUNTER_REGULAR_ZONE then
    source_zone = getObjectFromGUID(ENCOUNTER_SORT_ZONE)
  end

  function local_coroutine()
    local active_pokemon_card = active_zone:getObjects()[1]
    if active_pokemon_card then put_object_into_zone_deck(source_zone, active_pokemon_card) end
    brief_pause()
    for _, pokemon_card in ipairs(party_zone:getObjects()) do
      put_object_into_zone_deck(source_zone, pokemon_card)
      brief_pause()
    end
    motion_pause()
    if source_zone.type == "Layout" then
      source_zone.LayoutZone:layout()
    end
    return 1
  end
  startLuaCoroutine(self, "local_coroutine")

  if not previous_audio_clip then return end
  MusicPlayer:setCurrentAudioclip(previous_audio_clip)
  MusicPlayer:play()
  previous_audio_clip = nil
end
