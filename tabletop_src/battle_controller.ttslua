#include config
#include utils

local field_zone_1 = getObjectFromGUID(ARENA_FIELD_ZONE_GUIDS[1])
local field_zone_2 = getObjectFromGUID(ARENA_FIELD_ZONE_GUIDS[2])
local active_zone_1 = getObjectFromGUID(ARENA_ACTIVE_ZONE_GUIDS[1])
local active_zone_2 = getObjectFromGUID(ARENA_ACTIVE_ZONE_GUIDS[2])
local control_panel_1 = getObjectFromGUID(ARENA_CONTROL_PANEL_GUIDS[1])
local control_panel_2 = getObjectFromGUID(ARENA_CONTROL_PANEL_GUIDS[2])


function onLoad()
  self.createButton({
    click_function = "roll_dice",
    function_owner = self,
    position       = {0, 0.1, 0},
    width          = 600,
    height         = 600,
    color          = {0, 0, 0, 0},
    tooltip        = "Roll Dice"
  })
  self.createButton({
    click_function = "dummy_button",
    function_owner = self,
    position       = {0, 0.1, 0},
    width          = 0,
    height         = 0,
    font_size      = 500,
    font_color     = WOOD_COLOUR,
    label          = "+0"
  })

  update_ui()
end

function roll_dice_in(field_zone)
  for _, object in pairs(field_zone:getObjects()) do
    if object.type == "Dice" then
      object:roll()
    end
  end
end

function roll_dice()
  self:editButton({index=1, label=""})
  roll_dice_in(field_zone_1)
  roll_dice_in(field_zone_2)
  Wait.frames(function() self:editButton({index=1, label="."}) end, 75)
  Wait.frames(function() self:editButton({index=1, label=".."}) end, 150)
  Wait.frames(function() self:editButton({index=1, label="..."}) end, 225)
  Wait.frames(update_ui, 300)
  Wait.frames(actions, 300)
end

function get_max_dice_value_from(field_zone)
  local max_value = 0
  for _, object in pairs(field_zone:getObjects()) do
    if object.type == "Dice" then
      max_value = (object:getValue() > max_value) and object:getValue() or max_value
    end
  end
  return max_value
end

function update_ui()
  local dice_value_1 = get_max_dice_value_from(field_zone_1)
  local dice_value_2 = get_max_dice_value_from(field_zone_2)
  local dice_value_difference = dice_value_1 - dice_value_2

  if dice_value_difference > 0 then
    self:setRotationSmooth({0, 180, 0}, false, false)
  elseif dice_value_difference < 0 then
    self:setRotationSmooth({0, 0, 0}, false, false)
    dice_value_difference = -dice_value_difference
  end

  self:editButton({index=1, label="+" .. dice_value_difference})
end

function actions()
  if control_panel_1:call("has_switch_selected") then
    control_panel_1:call("switch_out")
  end
  if control_panel_2:call("has_switch_selected") then
    control_panel_2:call("switch_out")
  end

  control_panel_1:call("unhide")
  control_panel_2:call("unhide")
end
