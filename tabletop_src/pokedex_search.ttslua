#include config
#include utils

local starter_zone = getObjectFromGUID(starter_zone_guid)
local weak_zone = getObjectFromGUID(weak_zone_guid)
local moderate_zone = getObjectFromGUID(moderate_zone_guid)
local strong_zone = getObjectFromGUID(strong_zone_guid)
local legendary_zone = getObjectFromGUID(legendary_zone_guid)
local evolution_zone = getObjectFromGUID(evolution_zone_guid)
local preevolution_zone = getObjectFromGUID(preevolution_zone_guid)
local layout_zone = getObjectFromGUID(layout_zone_guid)
local galactic_grunt_zone = getObjectFromGUID(galactic_grunt_zone_guid)
local galactic_commander_zone = getObjectFromGUID(galactic_commander_zone_guid)
local galactic_boss_zone = getObjectFromGUID(galactic_boss_zone_guid)

local return_coroutine_running = false

function onLoad()
  language_vars = load_module(MODULE_LANGUAGE_TAG)

  secret_zone = getObjectFromGUID(config.guids.SECRET_ENCOUNTER_ZONE)

  button_params = {
    function_owner = self,
    scale          = {0.5, 1, 0.5},
    width          = 810,
    height         = 270,
    font_size      = 150,
    font_color     = config.colours.WHITE
  }
  -- Search Button
  button_params.click_function = "search_button"
  button_params.position = {-0.46, 0.2, 0.77}
  self:createButton(button_params)
  -- Evolve Button
  button_params.click_function = "evolve_button"
  button_params.position = {0.77, 0.2, 0.77}
  self:createButton(button_params)

  update_panel()
end

--
--
--

function pokemon_in_layout_zone()
  return len(layout_zone:getObjects()) > 0
end

function pokemon_in_preevolution_zone()
  return len(preevolution_zone:getObjects()) > 0
end

function search_button(_, player_colour)
  if pokemon_in_layout_zone() then
    return_cards()
  else
    biome, climate, encounter, gm_notes = get_search_params(player_colour)
    search_for_encounter(biome, climate, encounter, gm_notes)
  end
  update_panel()
end

function evolve_button()
  if not pokemon_in_preevolution_zone() then
    print(language_vars.pokedex.EVOLVE_SLOT_MESSAGE)
    return
  elseif pokemon_in_layout_zone() then
    print(language_vars.pokedex.EVOLVE_RETURN_MESSAGE)
    return
  end

  local preevolution = get_object(preevolution_zone)
  local evolution_names = preevolution:getVar("evolve_into")
  if not evolution_names then
    print(language_vars.pokedex.EVOLVE_INVALID_MESSAGE)
    return
  end

  function get_cards_from_evolution_deck()
    for _, evolution_name in pairs(evolution_names) do
      local evolution_guid = get_evolution_guid(evolution_name)
      take_object_from_zone_deck(evolution_zone, {
        position = layout_zone:getPosition() + Vector(0, 2.5, 0),
        rotation = layout_zone:getRotation() + Vector(0, 180, 0),
        guid     = evolution_guid,
        smooth   = false
      })
      brief_pause()
    end

    brief_pause()
    layout_zone.LayoutZone:layout()
    return 1
  end

  startLuaCoroutine(self, "get_cards_from_evolution_deck")
  update_panel()
end

--
--
--

function get_zone_from_tags(tags)
  if contains(tags, config.tags.encounters.GALACTIC_GRUNT) then
    return galactic_grunt_zone
  elseif contains(tags, config.tags.encounters.GALACTIC_COMMANDER) then
    return galactic_commander_zone
  elseif contains(tags, config.tags.encounters.GALACTIC_BOSS) then
    return galactic_boss_zone
  elseif contains(tags, config.tags.encounters.STARTER) then
    return starter_zone
  elseif contains(tags, config.tags.encounters.WEAK) then
    return weak_zone
  elseif contains(tags, config.tags.encounters.MODERATE) then
    return moderate_zone
  elseif contains(tags, config.tags.encounters.STRONG) then
    return strong_zone
  elseif contains(tags, config.tags.encounters.LEGENDARY) or contains(tags, config.tags.encounters.ULTRA_BEAST) or contains(tags, config.tags.encounters.ULTRA_BURST) or contains(tags, config.tags.encounters.NOBLE) then
    return legendary_zone
  elseif contains(tags, config.tags.encounters.EVOLUTION) then
    return evolution_zone
  elseif contains(tags, config.tags.encounters.SECRET) then
    return secret_zone
  end
end

function return_cards()
  function return_coroutine()
    return_coroutine_running = true
    local infos = get_object_infos_from_zone_deck(layout_zone)

    for _, info in reversedipairs(infos) do
      local tags = info.tags
      local guid = info.guid
      local zone = get_zone_from_tags(tags)
      take_object_from_zone_deck(layout_zone, {
        position = zone:getPosition() + Vector(0, 2.5, 0),
        rotation = zone:getRotation(),
        guid     = guid,
        smooth   = false
      })
      brief_pause()
    end
    return_coroutine_running = false
    return 1
  end
  if not return_coroutine_running then
    startLuaCoroutine(self, "return_coroutine")
  else
    print(language_vars.pokedex.RETURN_ALREADY_RUNNING_MESSAGE)
  end
end

function get_evolution_guid(evolution_name)
  local infos = get_object_infos_from_zone_deck(evolution_zone)
  for _, info in pairs(infos) do
    local _, _, internal_name = string.find(info.lua_script, 'internal_name = "([%w%p%s]+)"')
    if internal_name and internal_name == evolution_name then
      return info.guid
    end
  end
  print('"' .. evolution_name .. '"' .. language_vars.pokedex.EVOLVE_NOT_FOUND_MESSAGE)
end

function get_search_params(player_colour)
  local trainer_token = get_trainer_token(player_colour)
  if not trainer_token then
    return
  end

  local hit_list = Physics:cast({
    origin       = trainer_token:getPosition() + Vector(0, 1, 0),
    direction    = {0, -1, 0},
    type         = 2,
    size         = {1.5, 1.5, 1.5},
    max_distance = 2
  })

  for _, hit_info in pairs(hit_list) do
    local hit_object = hit_info.hit_object
    if hit_object:hasTag(config.tags.world.CAMPAIGN) then
      break
    elseif hit_object:hasTag(config.tags.world.ENCOUNTER) then
      local encounter_token_tags = hit_object:getTags()
      return get_biome_tag(encounter_token_tags), get_climate_tag(encounter_token_tags), get_encounter_tag(encounter_token_tags), hit_object:getGMNotes()
    end
  end
  print('"' .. player_colour ..  '"' .. language_vars.pokedex.SEARCH_NOT_ON_ENCOUNTER_MESSAGE)
end

function get_encounter_guid(biome, climate, zone, gm_notes)
  local infos = get_object_infos_from_zone_deck(zone, true)
  for _, info in pairs(infos) do
    if zone == legendary_zone then
      local _, _, pokedex_name = string.find(info.lua_script, 'pokedex_name = "([%w%p%s]+)"')
      if pokedex_name and pokedex_name == gm_notes then
        return info.guid
      end
    else
      local card_biome = get_biome_tag(info.tags)
      local card_climate = get_climate_tag(info.tags)
      -- Apricorn Trees/Reefs
      if card_biome == biome and card_climate == climate then
        return info.guid
      -- Distortion Gates
      elseif (card_biome == biome and not climate) or (biome and not climate and not card_biome and not card_climate) then
        return info.guid
      -- Warped Apricorn Trees
      elseif not biome and not climate then
        return info.guid
      end
    end
  end
end

function search_for_encounter(biome, climate, encounter, gm_notes)
  local search_count
  local search_zone

  if encounter == config.tags.encounters.WEAK then
    search_count = 3
    search_zone = weak_zone
  elseif encounter == config.tags.encounters.MODERATE then
    search_count = 2
    search_zone = moderate_zone
  elseif encounter == config.tags.encounters.STRONG then
    search_count = 1
    search_zone = strong_zone
  elseif encounter == config.tags.encounters.LEGENDARY or encounter == config.tags.encounters.ULTRA_BEAST or encounter == config.tags.encounters.ULTRA_BURST or encounter == config.tags.encounters.NOBLE then
    search_count = 1
    search_zone = legendary_zone
  elseif encounter == config.tags.encounters.DISTORTION then
    search_count = 3
    search_zone = strong_zone
  elseif encounter == config.tags.encounters.SECRET then
    search_count = 6
    search_zone = secret_zone
  else
    return
  end

  function get_cards_from_search_coroutine()
    for i = 1, search_count do
      local encounter_guid = get_encounter_guid(biome, climate, search_zone, gm_notes)
      if not encounter_guid and i == 1 then
        print(language_vars.pokedex.SEARCH_OUT_OF_POKEMON_MESSAGE)
        break
      end
      take_object_from_zone_deck(search_zone, {
        position = layout_zone:getPosition() + Vector(0, 0.25, 0),
        rotation = layout_zone:getRotation() + Vector(0, 180, 0),
        guid     = encounter_guid,
        smooth   = false
      })
      brief_pause()

      if encounter == config.tags.encounters.DISTORTION then
        if search_zone == strong_zone then
          search_zone = moderate_zone
        elseif search_zone == moderate_zone then
          search_zone = weak_zone
        end
      end
    end

    brief_pause()
    layout_zone.LayoutZone:layout()
    return 1
  end
  startLuaCoroutine(self, "get_cards_from_search_coroutine")
end

--
--
--

function update_panel()
  local search_button_label = language_vars.pokedex.SEARCH_BUTTON_LABEL
  local search_button_colour = {100/255, 100/255, 250/255}
  if pokemon_in_layout_zone() then
    search_button_label = language_vars.pokedex.RETURN_BUTTON_LABEL
    search_button_colour = {250/255, 100/255, 100/255}
  end
  self:editButton({index=0, label=search_button_label, color=search_button_colour})

  local evolve_button_label = language_vars.pokedex.EVOLVE_BUTTON_LABEL
  local evolve_button_colour = {200/255, 100/255, 250/255}
  if not pokemon_in_preevolution_zone() or pokemon_in_layout_zone() then
    evolve_button_colour = {50/255, 75/255, 100/255}
  end
  self:editButton({index=1, label=evolve_button_label, color=evolve_button_colour})
end
