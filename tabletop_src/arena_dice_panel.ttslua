#include utils

local active_zone = getObjectFromGUID(active_zone_guid)
local enemy_active_zone = getObjectFromGUID(enemy_active_zone_guid)
local field_zone = getObjectFromGUID(field_zone_guid)
local dice_bag = getObjectFromGUID(dice_bag_guid)
local fatigue_dice = getObjectFromGUID(fatigue_dice_guid)

local dice_button_state = 1
local type_button_state = 1
local type_range_button_state = 1

FATIGUE_STATE_LEVEL = 6
FATIGUE_ROTATIONS = {
  Vector(270, 180, 0),
  Vector(0, 180, 0),
  Vector(0, 180, 270),
  Vector(0, 180, 90),
  Vector(0, 180, 180),
  Vector(90, 180, 0)
}

function onLoad()
  config_vars = load_module(MODULE_CONFIG_TAG)
  language_vars = load_module(MODULE_LANGUAGE_TAG)

  local button_params = {
    function_owner = self,
    scale          = {0.5, 1, 0.5},
    color          = config_vars.colours.WOOD,
    font_color     = config_vars.colours.WHITE,
    hover_color    = config_vars.colours.LIGHT_WOOD,
    press_color    = config_vars.colours.LIGHT_WOOD
  }
  -- Roll Button
  button_params.click_function = "roll_button"
  button_params.width = 1700
  button_params.height = 920
  button_params.position = {0, 0.1, -0.4125}
  button_params.font_size = 400
  button_params.label = language_vars.arena_dice_roller.ROLL_BUTTON_LABEL
  self:createButton(button_params)
  -- Dice Button
  button_params.click_function = "dice_button_toggle"
  button_params.width = 800
  button_params.height = 680
  button_params.position = {-0.465, 0.1, 0.525}
  button_params.font_size = 200
  button_params.tooltip = language_vars.arena_dice_roller.DICE_BUTTON_TOOLTIP
  self:createButton(button_params)
  -- Type Button
  button_params.click_function = "type_button_toggle"
  button_params.width = 800
  button_params.height = 680
  button_params.position = {0.465, 0.1, 0.525}
  button_params.font_size = 200
  button_params.tooltip = language_vars.arena_dice_roller.TYPE_BUTTON_TOOLTIP
  self:createButton(button_params)
  -- Type Range Button
  button_params.click_function = "type_range_button_toggle"
  button_params.scale = {0.5, 0.5, 0.5}
  button_params.width = 130
  button_params.height = 130
  button_params.position = {0.9025, 0.1, 0.125}
  button_params.label = ""
  button_params.tooltip = language_vars.arena_dice_roller.TYPE_RANGE_BUTTON_TOOLTIP
  self:createButton(button_params)

  update_panel()
end

--
--
--

function clean_up_dice()
  local dice_list = getObjectsWithTag(config_vars.tags.objects.ATTACK_DICE)
  for _, dice in pairs(dice_list) do
    dice:destroyObject()
  end
end

function animate_model()
  local models = field_zone:getObjects()
  for _, model in pairs(models) do
    model.AssetBundle:playTriggerEffect(1)
  end
end

function reset_fatigue_dice()
  fatigue_dice:setPositionSmooth(fatigue_dice:getPosition() + Vector(0, 0.1, 0))
  fatigue_dice:setRotationSmooth(FATIGUE_ROTATIONS[1] + Vector(0, self:getRotation().y, 0))
end

function increment_fatigue_dice()
  local current_state = fatigue_dice:getValue()
  if current_state < FATIGUE_STATE_LEVEL then
    fatigue_dice:setPositionSmooth(fatigue_dice:getPosition() + Vector(0, 0.1, 0))
    fatigue_dice:setRotationSmooth(FATIGUE_ROTATIONS[current_state + 1] + Vector(0, self:getRotation().y, 0))
  end
end

function roll_button()
  clean_up_dice()
  local direction = math.cos(math.rad(field_zone:getRotation().y))
  local z_offset = direction * 1
  local x_offset = -direction * (dice_button_state - 1) / 2
  animate_model()
  for _ = 1, dice_button_state do
    local spawned_dice = dice_bag:takeObject({
      position = field_zone:getPosition() + Vector(x_offset, 0.1, z_offset),
      rotation = Vector(math.random(1, 4) * 90, math.random(1, 4) * 90, math.random(1, 4) * 90),
      smooth   = false,
      callback_function = function(dice) Wait.frames(function() if not dice:isDestroyed() then roll_callback(dice, direction) end end, 50) end
    })
    spawned_dice:addTag(config_vars.tags.objects.ATTACK_DICE)

    -- Colour the attack dice
    local active_pokemon = get_active_pokemon()
    local move_types = get_move_types(active_pokemon)
    local type_name = move_types[type_button_state]
    if type_name ~= "Typeless" then
      spawned_dice:setColorTint(config_vars.colours.TYPE[type_name])
      spawned_dice:highlightOn(config_vars.colours.TYPE[type_name])
    end

    x_offset = x_offset + direction * 1
  end

  local active_pokemon = get_active_pokemon(false)
  if active_pokemon then
    increment_fatigue_dice()
  end
end

function roll_callback(dice, direction)
  dice:addForce(Vector(0, 0, direction * 20))
  dice:addTorque(Vector(math.random() * 5000, math.random() * 5000, math.random() * 5000))
  Wait.frames(function() if not dice:isDestroyed() then adjust_dice(dice) end end, 300)
end

function adjust_dice(dice)
  local rotation = dice:getRotation()
  dice:setRotationSmooth(Vector(round(rotation.x / 90) * 90, rotation.y, round(rotation.z / 90) * 90))
end

--
--
--

function dice_button_toggle(_, _, alt_click)
  local state_step = not alt_click and 1 or -1
  if dice_button_state + state_step > 9 or dice_button_state + state_step < 1 then
    return
  end
  dice_button_state = dice_button_state + state_step
  update_panel()
end

--
--
--

function get_next_type_button_state(alt_click)
  local active_pokemon = get_active_pokemon()

  local move_types = get_move_types(active_pokemon)
  if not move_types then
    return nil
  end
  return get_next_state(type_button_state, #move_types, alt_click)
end

function type_button_toggle(_, _, alt_click)
  type_button_state = get_next_type_button_state(alt_click)
  update_panel()
end

function get_effectiveness(type_name, enemy_base_types)
  if not type_name then
    return nil
  end

  local effectiveness = 0

  if enemy_base_types then
    for _, enemy_base_type in pairs(enemy_base_types) do
      effectiveness = effectiveness + (config_vars.type_chart[type_name][enemy_base_type] and config_vars.type_chart[type_name][enemy_base_type] or 0)
    end
  end
  return effectiveness
end

--
--
--

function type_range_button_toggle()
  type_range_button_state = get_next_state(type_range_button_state, 2, false)
  update_panel()
end

--
--
--

function get_active_pokemon(is_enemy)
  local active_pokemon
  local zone = not is_enemy and active_zone or enemy_active_zone
  for _, object in pairs(zone:getObjects()) do
    if object.type == "Card" then
      active_pokemon = object
      break
    end
  end

  if active_pokemon and active_pokemon:getLuaScript() == "" then
    active_pokemon:setName(language_vars.errors.MISSING_DATA_NAME)
    active_pokemon:setDescription(language_vars.errors.MISSING_DATA_DESCRIPTION)
    active_pokemon:highlightOn({250/255, 100/255, 100/255})
    return
  end
  return active_pokemon
end

function get_move_types(pokemon)
  local move_types = {"Typeless"}
  if type_range_button_state == 1 then
    if pokemon then
      for _, v in ipairs(pokemon:getVar("moves")) do
        table.insert(move_types, v)
      end
    end
  else
    move_types = get_keys(config_vars.type_chart)
  end
  return move_types
end

function get_base_types(pokemon)
  if pokemon then
    return pokemon:getVar("types")
  end
end

--
--
--

function update_panel()
  local active_pokemon = get_active_pokemon(false)
  if not active_pokemon and fatigue_dice:getValue() ~= 1 then
    reset_fatigue_dice()
  end

  local move_types = get_move_types(active_pokemon)
  if type_button_state > #move_types then
    type_button_state = 1
  end
  local type_name = move_types[type_button_state]

  local enemy_active_pokemon = get_active_pokemon(true)
  local enemy_base_types = get_base_types(enemy_active_pokemon)

  local effectiveness = get_effectiveness(type_name, enemy_base_types)

  if not active_pokemon and not enemy_active_pokemon then
    clean_up_dice()
  end

  local font_colour
  if fatigue_dice:getValue() == FATIGUE_STATE_LEVEL then
    colour = config_vars.colours.DARK
    font_colour = {250/255, 125/255, 100/255}
    tooltip = language_vars.arena_dice_roller.FATIGUED_TOOLTIP
    fatigue_dice:highlightOn({250/255, 125/255, 100/255})
  else
    colour = config_vars.colours.WOOD
    font_colour = config_vars.colours.WHITE
    tooltip = nil
    fatigue_dice:highlightOff()
  end
  self:editButton({
    index = 0,
    color = colour,
    font_color = font_colour,
    tooltip = tooltip
  })
  self:editButton({
    index = 1,
    label = dice_button_state .. language_vars.arena_dice_roller.DICE_BUTTON_LABEL
  })
  self:editButton({
    index = 2,
    label = language_vars.types[type_name] .. "\n" .. signed_label(effectiveness),
    color = config_vars.colours.TYPE[type_name]
  })
  local type_range_button_colours = {config_vars.colours.WOOD, {100/255, 200/255, 100/255}}
  self:editButton({
    index = 3,
    color = type_range_button_colours[type_range_button_state]
  })
end
