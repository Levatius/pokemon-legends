#include config
#include utils

local cry_player = getObjectFromGUID(CRY_PLAYER_GUID)

function deploy_model_callback(model, our_active_pokemon)
  if not our_active_pokemon.is_face_down then
    model.AssetBundle:playLoopingEffect(0)
    model.AssetBundle:playTriggerEffect(2)
    local pokemon_name = our_active_pokemon:getVar("pokedex_name")
    local audio_clip_name = string.gsub(string.lower(pokemon_name), "[%s+%.+%-+]", "") .. ".mp3"
    cry_player:setValue(CRY_BASE_URL .. audio_clip_name)
  else
    model.AssetBundle:playLoopingEffect(3)
  end
end

function deploy_model()
  local our_active_pokemon = get_pokemon_from(our_active_zone_guid)
  if not our_active_pokemon then return end

  local battle_zone = getObjectFromGUID(our_battle_zone_guid)
  local model_bag = getObjectFromGUID(model_bag_guid)

  local model_guid
  for _, contained_object in pairs(model_bag:getObjects()) do
    if contained_object.name == our_active_pokemon:getVar("internal_name") and contained_object.description == our_active_pokemon:getVar("form") then
      model_guid = contained_object.guid
      break
    end
  end

  if not model_guid then return end
  local model = model_bag:takeObject({
    position          = battle_zone:getPosition(),
    rotation          = battle_zone:getRotation(),
    guid              = model_guid,
    callback_function = function(model) deploy_model_callback(model, our_active_pokemon) end
  })
  model.interactable = false
end

function undeploy_model()
  local model_bag = getObjectFromGUID(model_bag_guid)
  local our_battle_zone = getObjectFromGUID(our_battle_zone_guid)
  local models = find_objects_with_tag(our_battle_zone, POKEMON_MODEL_TAG)
  for _, model in pairs(models) do
    if model.type ~= "Bag" then
      model.AssetBundle:playLoopingEffect(0)
      model_bag:putObject(model)
    end
  end
end
