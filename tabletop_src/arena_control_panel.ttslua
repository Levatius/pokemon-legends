#include config
#include utils

local selected_move_index
local selected_switch_index
local tactics_state = 1
local deployed_models = {}

function onLoad()
  for i = 0, 2 do
    self.createButton({
      click_function = "move_button_select_" .. i,
      function_owner = self,
      position       = {-0.65, 0.05, -2.11 + i * 0.525},
      width          = 600,
      height         = 225,
      font_size      = 125,
      hover_color    = LIGHT_BACKING_COLOUR,
      press_color    = LIGHT_BACKING_COLOUR
    })
  end

  for i = 0, 2 do
    self.createButton({
      click_function = "dummy_button",
      function_owner = self,
      position       = {0.65, 0.05, -2.11 + i * 0.525},
      width          = 0,
      height         = 0,
      font_size      = 200,
      font_color     = DARK_COLOUR
    })
  end

  self.createButton({
    click_function = "tactics_button_toggle",
    function_owner = self,
    position       = {-0.65, 0.05, -0.1},
    width          = 600,
    height         = 225,
    font_size      = 125,
    font_color     = DARK_COLOUR,
    label          = TACTICS_LABEL[tactics_state],
    color          = TACTICS_COLOUR[tactics_state],
    hover_color    = TACTICS_COLOUR[get_next_tactics_state()],
    press_color    = TACTICS_COLOUR[get_next_tactics_state()],
    tooltip        = "Toggle Tactics"
  })

  self.createButton({
    click_function = "dummy_button",
    function_owner = self,
    position       = {0.65, 0.05, -0.1},
    width          = 0,
    height         = 0,
    font_size      = 55,
    font_color     = DARK_COLOUR,
    label          = TACTICS_DESCRIPTION[tactics_state]
  })

  update_ui()
end

function dummy_button() end

-- MOVE BUTTON SELECTS

function move_button_select_0() move_button_select(1) end
function move_button_select_1() move_button_select(2) end
function move_button_select_2() move_button_select(3) end

function move_button_select(index)
  selected_move_index = (selected_move_index != index) and index or nil

  if selected_switch_index then selected_switch_index = nil end

  update_ui()
end

-- TACTICS BUTTON
function get_next_tactics_state()
  return (tactics_state % 3) + 1
end

function tactics_button_toggle()
  tactics_state = get_next_tactics_state()

  self.editButton({
    index       = 6,
    label       = TACTICS_LABEL[tactics_state],
    color       = TACTICS_COLOUR[tactics_state],
    hover_color = TACTICS_COLOUR[get_next_tactics_state()],
    press_color = TACTICS_COLOUR[get_next_tactics_state()]
  })
  self.editButton({
    index = 7,
    label = TACTICS_DESCRIPTION[tactics_state]
  })

  update_ui()
end

function get_pokemon_from(zone_guid)
  local zone = getObjectFromGUID(zone_guid)
  for _, object in pairs(zone:getObjects()) do
    if object:hasTag(POKEMON_CARD_TAG) and object.type == "Card" then
      return object
    end
  end
end

function get_effectiveness_between(move_type, enemy_types)
  local effectiveness = 0
  for _, enemy_type in pairs(enemy_types) do
    effectiveness = effectiveness + (TYPE_CHART[move_type][enemy_type] and TYPE_CHART[move_type][enemy_type] or 0)
  end
  return effectiveness
end

function update_ui()
  local our_active_pokemon = get_pokemon_from(our_active_zone_guid)
  local enemy_active_pokemon = get_pokemon_from(their_active_zone_guid)

  for i = 0, 2 do
    local button_index = i

    local type = (our_active_pokemon and our_active_pokemon:getVar("moves"))
      and our_active_pokemon:getVar("moves")[i + 1] or nil

    self.editButton({
      index=button_index,
      label=type and type or "Move " .. (i + 1),
      color=type and TYPE_COLOURS[type] or LIGHT_BACKING_COLOUR,
      font_color=(button_index + 1 == selected_move_index) and WHITE_COLOUR or DARK_COLOUR
    })
  end

  local our_attack = our_active_pokemon and our_active_pokemon:getVar("attack") or 0
  local enemy_defence = enemy_active_pokemon and enemy_active_pokemon:getVar("defence") or 0

  local our_types = our_active_pokemon and our_active_pokemon:getVar("types") or nil
  local enemy_types = enemy_active_pokemon and enemy_active_pokemon:getVar("types") or nil

  for i = 0, 2 do
    local button_index = 3 + i

    local move_type = (our_active_pokemon and our_active_pokemon:getVar("moves"))
      and our_active_pokemon:getVar("moves")[i + 1] or nil

    local move_effectiveness = (move_type and enemy_types)
      and get_effectiveness_between(move_type, enemy_types) or 0

    local stab_bonus = (move_type and our_types and contains(our_types, move_type))
      and STAB_BONUS or 0

    local tactics_modifier = TACTICS_MODIFIERS[tactics_state]

    local damage = our_attack - enemy_defence + move_effectiveness + stab_bonus + tactics_modifier

    self.editButton({
      index=button_index,
      label=damage
    })
  end
end

function deploy_model_callback(model)
  model:call("attack3_func")
end

function deploy_model()
  local our_active_pokemon = get_pokemon_from(our_active_zone_guid)
  if not our_active_pokemon then return end

  local model_zone = getObjectFromGUID(model_zone_guid)
  local model_bag = getObjectFromGUID(model_bag_guid)

  local model_guid
  for _, contained_object in pairs(model_bag:getObjects()) do
    if contained_object.name == our_active_pokemon:getVar("dexname") then
      model_guid = contained_object.guid
      break
    end
  end

  if not model_guid then return end
  model_bag:takeObject({
    position          = model_zone:getPosition(),
    rotation          = model_zone:getRotation(),
    guid              = model_guid,
    callback_function = function(model) deploy_model_callback(model) end
  })
  table.insert(deployed_models, model_guid)
end

function undeploy_model()
  local model_bag = getObjectFromGUID(model_bag_guid)

  for _, model_guid in pairs(deployed_models) do
    local model = getObjectFromGUID(model_guid)
    if model then
      model_bag:putObject(model)
      local model_index = find_first_index(deployed_models, model_guid)
      table.remove(deployed_models, model_index)
    end
  end
end
