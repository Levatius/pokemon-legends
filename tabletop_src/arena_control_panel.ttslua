#include config
#include utils

TACTICS_LABEL = {"S", "!", "C"}
TACTICS_COLOUR = {{100/255, 250/255, 100/255}, {250/255, 100/255, 100/255}, {100/255, 100/255, 250/255}}
TACTICS_TOOLTIP = {"Standard", "Reckless", "Crafty"}

local tactics_states = {1, 1, 1}

function onLoad()
  for i = 0, 2 do
    local move_params = {
      click_function = "move_button_toggle",
      function_owner = self,
      position       = {-0.65, 0.05, -2.11 + i * 0.525},
      width          = 600,
      height         = 225,
      font_size      = 125
    }
    self.createButton(move_params)
  end

  for i = 0, 2 do
    local states_index = i + 1
    local tactics_params = {
      click_function = "tactics_button_toggle_" .. i,
      function_owner = self,
      position       = {0.27, 0.05, -2.11 + i * 0.525},
      width          = 225,
      height         = 225,
      font_size      = 125,
      font_color     = DARK_COLOUR,
      label          = TACTICS_LABEL[tactics_states[states_index]],
      color          = TACTICS_COLOUR[tactics_states[states_index]],
      hover_color    = TACTICS_COLOUR[get_next_tactics_state(states_index)],
      press_color    = TACTICS_COLOUR[get_next_tactics_state(states_index)],
      tooltip        = TACTICS_TOOLTIP[tactics_states[states_index]]
    }
    self.createButton(tactics_params)
  end

  for i = 0, 2 do
    local damage_params = {
      click_function = "move_button_toggle",
      function_owner = self,
      position       = {0.92, 0.05, -2.11 + i * 0.525},
      width          = 0,
      height         = 0,
      font_size      = 150,
      font_color     = DARK_COLOUR
    }
    self.createButton(damage_params)
  end

  update_ui()
end

-- TACTICS BUTTONS
function get_next_tactics_state(states_index)
  return (tactics_states[states_index] % 3) + 1
end

-- Needed because TTS does not tell you the index of the button pressed...
function tactics_button_toggle_0() tactics_button_toggle(0) end
function tactics_button_toggle_1() tactics_button_toggle(1) end
function tactics_button_toggle_2() tactics_button_toggle(2) end

function tactics_button_toggle(index)
  local states_index = index + 1
  local button_index = 3 + index

  print(tactics_states[states_index] .. " " .. get_next_tactics_state(states_index))

  tactics_states[states_index] = get_next_tactics_state(states_index)

  self.editButton({
    index       = button_index,
    label       = TACTICS_LABEL[tactics_states[states_index]],
    color       = TACTICS_COLOUR[tactics_states[states_index]],
    hover_color = TACTICS_COLOUR[get_next_tactics_state(states_index)],
    press_color = TACTICS_COLOUR[get_next_tactics_state(states_index)],
    tooltip     = TACTICS_TOOLTIP[tactics_states[states_index]]
  })
end

function get_pokemon_from(zone_guid)
  zone = getObjectFromGUID(zone_guid)
  for _, contained_object in pairs(zone:getObjects()) do
    return getObjectFromGUID(contained_object.guid)
  end
end

function get_effectiveness_between(move_type, enemy_types)
  local effectiveness = 0
  for _, enemy_type in pairs(enemy_types) do
    effectiveness = effectiveness + (TYPE_CHART[move_type][enemy_type] and TYPE_CHART[move_type][enemy_type] or 0)
  end
  return effectiveness
end

function update_ui()
  local our_active_pokemon = get_pokemon_from(our_active_pokemon_zone_guid)
  local enemy_active_pokemon = get_pokemon_from(enemy_active_pokemon_zone_guid)

  for i = 0, 2 do
    local type = (our_active_pokemon and our_active_pokemon:getVar("moves"))
      and our_active_pokemon:getVar("moves")[i + 1] or nil

    self.editButton({
      index=i,
      label=type and type or "Move " .. (i + 1),
      color=type and TYPE_COLOURS[type] or LIGHT_BACKING_COLOUR
    })
  end

  local our_attack = our_active_pokemon and our_active_pokemon:getVar("attack") or 0
  local enemy_defence = enemy_active_pokemon and enemy_active_pokemon:getVar("defence") or 0

  local our_types = our_active_pokemon and our_active_pokemon:getVar("types") or nil
  local enemy_types = enemy_active_pokemon and enemy_active_pokemon:getVar("types") or nil

  for i = 0, 2 do
    local move_type = (our_active_pokemon and our_active_pokemon:getVar("moves"))
      and our_active_pokemon:getVar("moves")[i + 1] or nil

    local move_effectiveness = (move_type and enemy_types)
      and get_effectiveness_between(move_type, enemy_types) or 0

    local stab_bonus = (move_type and our_types and contains(our_types, move_type))
      and STAB_BONUS or 0

    local damage = our_attack - enemy_defence + move_effectiveness + stab_bonus

    self.editButton({
      index=6 + i,
      label=damage
    })
  end
end
