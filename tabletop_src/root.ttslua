#include config
#include utils

function onload()
  print("Root Loaded")
  math.randomseed(os.time())

  init_models()
end

--
--
--

-- Model Handling
function init_models()
  -- Do not allow players to mess with any models
  for _, object in pairs(getObjectsWithTag(POKEMON_MODEL_TAG)) do
    object.interactable = false
  end
  deduplicate_models()
end

function deduplicate_models()
  -- This method should not be necessary, but good to have just in case
  for _, object in pairs(getObjectsWithTag(POKEMON_MODEL_TAG)) do
    if object.type == "Bag" then
      local models_in_bag = {}
      for _, model in pairs(object:getObjects()) do
        if not models_in_bag[model.name] then
          models_in_bag[model.name] = 1
        else
          models_in_bag[model.name] = models_in_bag[model.name] + 1
          local model = object:takeObject({guid=model.guid})
          model:destroyObject()
        end
      end
    end
  end
end

--
--
--

function get_pokemon_zone(zone)
  -- Arena Special Case
  if zone:getName() == "Arena Pokemon Zone" then
    zone = getObjectFromGUID(zone:getVar("pokemon_zone_guid"))
  end
  return zone
end

function set_balls_in_zone_to_pokemon(zone, pokemon)
  for _, object_in_zone in pairs(zone:getObjects()) do
    if object_in_zone:hasTag(BALL_TOKEN_TAG) then
      object_in_zone:setName(pokemon:getName())
    end
  end
end

function reset_balls_in_zone(zone)
  for _, object_in_zone in pairs(zone:getObjects()) do
    if object_in_zone:hasTag(BALL_TOKEN_TAG) then
      object_in_zone:setName(object_in_zone:getGMNotes())
      object_in_zone:setVar("registered_zone", nil)
    end
  end
end

function register_zone_to_ball(zone, ball)
  -- Register Zone
  ball:setVar("registered_zone", zone)
  -- Set Name
  for _, object_in_zone in pairs(zone:getObjects()) do
    if object_in_zone:hasTag(POKEMON_CARD_TAG) and not object_in_zone.is_face_down then
      ball:setName(object_in_zone:getName())
      break
    end
  end
end

function is_zone_occupied(zone)
  for _, object_in_zone in pairs(zone:getObjects()) do
    if not object_in_zone:hasTag(BALL_TOKEN_TAG) then
      return true
    end
  end
  return false
end

function move_objects_between_zones(source_zone, target_zone)
  for _, object_in_zone in pairs(source_zone:getObjects()) do
    if not object_in_zone:hasTag(BALL_TOKEN_TAG) then
      local rotation_delta = target_zone:getRotation() - source_zone:getRotation()
      local position_delta = object_in_zone:getPosition() - source_zone:getPosition()
      position_delta:rotateOver("y", rotation_delta.y)
      object_in_zone:setPosition(target_zone:getPosition() + position_delta)
      object_in_zone:setRotation(object_in_zone:getRotation() + rotation_delta)
    end
  end
end

function onObjectEnterZone(zone, object)
  if not zone or not object then return end
  -- Update Zones
  if zone:hasTag(UPDATE_PANELS_TAG) then
    update_panels(zone)
  end
  -- Hand Zones
  if zone.type == "Hand" and object:hasTag(VILLAGE_CARD_TAG) then
    if #zone:getObjects() > 1 then
      print("Remove any objects from hand if trying to change hand colour.")
      return
    end

    local card_colour = object:getGMNotes()
    local zone_colour = zone:getValue()

    -- Change zone colour
    for _, object in pairs(getObjects()) do
      if object.type == "Hand" then
        if object:getValue() == card_colour and object:getGUID() != zone:getGUID() then
          object:setValue(zone_colour)
        end
      end
    end
    zone:setValue(card_colour)
  end
  -- Pokemon Zones
  if zone:hasTag(POKEMON_ZONE_TAG) then
    if object:hasTag(BALL_TOKEN_TAG) then
      zone = get_pokemon_zone(zone)
      local registered_zone = object:getVar("registered_zone")

      if not registered_zone or is_zone_occupied(zone) then
        register_zone_to_ball(zone, object)
        return
      end
      move_objects_between_zones(registered_zone, zone)

    elseif object:hasTag(POKEMON_CARD_TAG) and not object.is_face_down then
      set_balls_in_zone_to_pokemon(zone, object)
    end
  end
end

function onObjectLeaveZone(zone, object)
  if not zone or not object then return end
  -- Update Zones
  if zone:hasTag(UPDATE_PANELS_TAG) then
    update_panels(zone)
  end
  -- Pokemon Zones
  if zone:hasTag(POKEMON_ZONE_TAG) then
    if object:hasTag(BALL_TOKEN_TAG) then
      zone = get_pokemon_zone(zone)
      register_zone_to_ball(zone, object)
    elseif object:hasTag(POKEMON_CARD_TAG) and not object.is_face_down then
      reset_balls_in_zone(zone)
    end
  end
end

-- Container Events
function tryObjectEnterContainer(container, object)
  if container:hasTag(POKEMON_MODEL_TAG) then
    return object:hasTag(POKEMON_MODEL_TAG)
  elseif container:hasTag(APRICORN_TOKEN_TAG) and container:hasTag(JOURNEY_POINT_TOKEN_TAG) then
    return object:hasTag(APRICORN_TOKEN_TAG) or object:hasTag(JOURNEY_POINT_TOKEN_TAG)
  end
  return true
end

function onObjectEnterContainer(container, object)
  if container:hasTag(APRICORN_TOKEN_TAG) and container:hasTag(JOURNEY_POINT_TOKEN_TAG) then
    for _, bag_panel in pairs(getObjectsWithTag(BAG_PANEL_TAG)) do
      bag_panel:call("update_panel")
    end
  end
end

function onObjectLeaveContainer(container, object)
  if container:hasTag(APRICORN_TOKEN_TAG) and container:hasTag(JOURNEY_POINT_TOKEN_TAG) then
    for _, bag_panel in pairs(getObjectsWithTag(BAG_PANEL_TAG)) do
      bag_panel:call("update_panel")
    end
  end
end
