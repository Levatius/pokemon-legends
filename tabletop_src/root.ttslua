#include config
#include utils

function onload()
  print("Root Loaded")
  math.randomseed(os.time())

  init_models()
end

--
--
--

-- Model Handling
function init_models()
  -- Do not allow players to mess with any models
  for _, object in pairs(getObjectsWithTag(POKEMON_MODEL_TAG)) do
    object.interactable = false
  end
  deduplicate_models()
end

function deduplicate_models()
  -- This method should not be necessary, but good to have just in case
  for _, object in pairs(getObjectsWithTag(POKEMON_MODEL_TAG)) do
    if object.type == "Bag" then
      local models_in_bag = {}
      for _, model in pairs(object:getObjects()) do
        if not models_in_bag[model.name] then
          models_in_bag[model.name] = 1
        else
          models_in_bag[model.name] = models_in_bag[model.name] + 1
          local model = object:takeObject({guid=model.guid})
          model:destroyObject()
        end
      end
    end
  end
end

--
--
--

function onObjectEnterZone(zone, object)
  if not object or object:getGUID() == -1 then return end
  -- Update Zones
  if zone:hasTag(UPDATE_PANELS_TAG) then
    update_panels(zone)
  end
  -- Hand Zones
  if zone.type == "Hand" then
    if object:hasTag(VILLAGE_CARD_TAG) then
      zone:setValue(object:getGMNotes())
    end
  end
end

function onObjectLeaveZone(zone, object)
  if not object or object:getGUID() == -1 then return end
  -- Update Zones
  if zone:hasTag(UPDATE_PANELS_TAG) then
    update_panels(zone)
  end
end

-- Container Events
function tryObjectEnterContainer(container, object)
  if container:hasTag(POKEMON_MODEL_TAG) then
    return object:hasTag(POKEMON_MODEL_TAG)
  elseif container:hasTag(APRICORN_TOKEN_TAG) and container:hasTag(JOURNEY_POINT_TOKEN_TAG) then
    return object:hasTag(APRICORN_TOKEN_TAG) or object:hasTag(JOURNEY_POINT_TOKEN_TAG)
  end
  return true
end

function onObjectEnterContainer(container, object)
  if container:hasTag(APRICORN_TOKEN_TAG) and container:hasTag(JOURNEY_POINT_TOKEN_TAG) then
    for _, bag_panel in pairs(getObjectsWithTag(BAG_PANEL_TAG)) do
      bag_panel:call("update_panel")
    end
  end
end

function onObjectLeaveContainer(container, object)
  if container:hasTag(APRICORN_TOKEN_TAG) and container:hasTag(JOURNEY_POINT_TOKEN_TAG) then
    for _, bag_panel in pairs(getObjectsWithTag(BAG_PANEL_TAG)) do
      bag_panel:call("update_panel")
    end
  end
end
