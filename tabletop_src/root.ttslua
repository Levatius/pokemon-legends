#include config
#include utils
#include events/arena
#include events/battle_token
#include events/evolution
#include events/music
#include events/player
#include events/pokemon_collection

function onload()
  print("Root Loaded")
  math.randomseed(os.time())

  local cry_player = getObjectFromGUID(CRY_PLAYER_GUID)
  cry_player:setValue(CRY_BASE_URL)

  init_models()
end

--
--
--

-- Model Handling
function init_models()
  -- Do not allow players to mess with any models
  for _, object in pairs(getObjectsWithTag(POKEMON_MODEL_TAG)) do
    object.interactable = false
  end
  deduplicate_models()
end

function deduplicate_models()
  -- This method should not be necessary, but good to have just in case
  for _, object in pairs(getObjectsWithTag(POKEMON_MODEL_TAG)) do
    if object.type == "Bag" then
      local models_in_bag = {}
      for _, model in pairs(object:getObjects()) do
        if not models_in_bag[model.name] then
          models_in_bag[model.name] = 1
        else
          models_in_bag[model.name] = models_in_bag[model.name] + 1
          local model = object:takeObject({guid=model.guid})
          model:destroyObject()
        end
      end
    end
  end
end

--
--
--

function onObjectEnterZone(zone, object)
  if object:getGUID() == -1 then return end
  -- Scripting Zones
  if zone.type == "Scripting" then
    if zone:getName() == "Active Zone" or zone:getName() == "Search Preevolution Zone" then
      update_panels(zone)
    elseif zone:hasTag(MUSIC_CARTRIDGE_TAG) then
      music_events.on_enter_music_cartridge_zone(zone, object)
    end
  -- Layout Zones
  elseif zone.type == "Layout" then
    if zone:getName() == "Search Layout Zone" then
      update_panels(zone)
    end
  -- Hand Zones
  elseif zone.type == "Hand" then
    if object:hasTag(VILLAGE_CARD_TAG) then
      zone:setValue(object:getGMNotes())
    end
  end
end

function onObjectLeaveZone(zone, object)
  if object:getGUID() == -1 then return end
  if zone.type == "Scripting" then
    if zone:getName() == "Active Zone" or zone:getName() == "Search Preevolution Zone" then
      update_panels(zone)
    end
  -- Layout Zones
  elseif zone.type == "Layout" then
    if zone:getName() == "Search Layout Zone" then
      update_panels(zone)
    end
  end
end

-- Container Events
function tryObjectEnterContainer(container, object)
  if container:hasTag(POKEMON_MODEL_TAG) then
    return object:hasTag(POKEMON_MODEL_TAG)
  elseif container:hasTag(APRICORN_TOKEN_TAG) and container:hasTag(JOURNEY_POINT_TOKEN_TAG) then
    return object:hasTag(APRICORN_TOKEN_TAG) or object:hasTag(JOURNEY_POINT_TOKEN_TAG)
  end
  return true
end

function onObjectEnterContainer(container, object)
  if container:hasTag(APRICORN_TOKEN_TAG) and container:hasTag(JOURNEY_POINT_TOKEN_TAG) then
    for _, bag_panel in pairs(getObjectsWithTag(BAG_PANEL_TAG)) do
      bag_panel:call("update_panel")
    end
  end
end

function onObjectLeaveContainer(container, object)
  if container:hasTag(APRICORN_TOKEN_TAG) and container:hasTag(JOURNEY_POINT_TOKEN_TAG) then
    for _, bag_panel in pairs(getObjectsWithTag(BAG_PANEL_TAG)) do
      bag_panel:call("update_panel")
    end
  end
end

-- Rotation Events
-- function onObjectRotate(object)
--   if object:hasTag(POKEMON_CARD_TAG) and object.type == "Card" then
--     arena_events.on_rotate_pokemon_card(object)
--   elseif object:hasTag(STATUS_TOKEN_TAG) then
--     arena_events.on_rotate_status_token(object)
--   elseif object:hasTag(MUSIC_EVENTS_TAG) then
--     music_events.on_rotate_music_event_token(object)
--   end
-- end

-- Collision Events
function onObjectCollisionEnter(hit_object, collision_info)
  local collision_object = collision_info.collision_object
  if hit_object:hasTag(POKEMON_CARD_TAG) and hit_object.type == "Card" then
    if collision_object:hasTag(DAMAGE_TOKEN_TAG) then
      hit_object:addAttachment(collision_object)
    else
      evolution_events.on_collision_with_pokemon_card(hit_object, collision_object)
    end
  end
end
