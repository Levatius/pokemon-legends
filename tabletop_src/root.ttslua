#include config
#include utils
#include events/arena
#include events/battle_token
#include events/evolution
#include events/music
#include events/player
#include events/pokemon_collection

function onload()
  print("Root Loaded")
  math.randomseed(os.time())
  for _, object in pairs(getObjectsWithTag(POKEMON_CARD_TAG)) do
    if object.type == "Card" then
      object:registerCollisions()
    end
  end
  for _, object in pairs(getObjectsWithTag(POKEMON_MODEL_TAG)) do
    object.interactable = false
  end
  local cry_player = getObjectFromGUID(CRY_PLAYER_GUID)
  cry_player:setValue(CRY_BASE_URL)
end

-- Scripting Zone Events
function onObjectEnterScriptingZone(zone, object)
  if object:getGUID() == -1 then return end
  if zone:getName() == "Active Zone" or zone:hasTag(STANCE_TOKEN_TAG) or zone:hasTag(AURA_POWER_TOKEN_TAG) then
    update_panels(zone)
  elseif zone:hasTag(BATTLE_TOKEN_TAG) then
    battle_token_events.on_enter_zone(zone, object)
  elseif zone:hasTag(MUSIC_CARTRIDGE_TAG) then
    music_events.on_enter_music_cartridge_zone(zone, object)
  elseif zone:getGUID() == ENCOUNTER_SORT_ZONE_GUID then
    pokemon_collection.on_enter_sort_zone(zone, object)
  end
end

function onObjectLeaveScriptingZone(zone, object)
  if object:getGUID() == -1 then return end
  if zone:getName() == "Active Zone" or zone:hasTag(STANCE_TOKEN_TAG) or zone:hasTag(AURA_POWER_TOKEN_TAG) then
    update_panels(zone)
  elseif zone:hasTag(BATTLE_TOKEN_TAG) then
    battle_token_events.on_leave_zone(zone, object)
  end
end

-- Container Events
function tryObjectEnterContainer(container, object)
  if container:hasTag(POKEMON_MODEL_TAG) then
    return object:hasTag(POKEMON_MODEL_TAG)
  elseif container:hasTag(APRICORN_TOKEN_TAG) and container:hasTag(JOURNEY_POINT_TOKEN_TAG) then
    return object:hasTag(APRICORN_TOKEN_TAG) or object:hasTag(JOURNEY_POINT_TOKEN_TAG)
  end
  return true
end

function onObjectEnterContainer(container, object)
  if container:hasTag(APRICORN_TOKEN_TAG) and container:hasTag(JOURNEY_POINT_TOKEN_TAG) then
    for _, bag_panel in pairs(getObjectsWithTag(BAG_PANEL_TAG)) do
      bag_panel:call("update_panel")
    end
  end
end

function onObjectLeaveContainer(container, object)
  if container:hasTag(APRICORN_TOKEN_TAG) and container:hasTag(JOURNEY_POINT_TOKEN_TAG) then
    for _, bag_panel in pairs(getObjectsWithTag(BAG_PANEL_TAG)) do
      bag_panel:call("update_panel")
    end
  end
end

function onObjectEnterZone(zone, object)
  if zone:hasTag(POKEMON_CARD_TAG) and object:hasTag(POKEMON_CARD_TAG) and object.type == "Card" and not object.is_face_down then
    object:registerCollisions()
  end
end

-- Rotation Events
-- function onObjectRotate(object)
--   if object:hasTag(POKEMON_CARD_TAG) and object.type == "Card" then
--     arena_events.on_rotate_pokemon_card(object)
--   elseif object:hasTag(STATUS_TOKEN_TAG) then
--     arena_events.on_rotate_status_token(object)
--   elseif object:hasTag(MUSIC_EVENTS_TAG) then
--     music_events.on_rotate_music_event_token(object)
--   end
-- end

-- Collision Events
function onObjectCollisionEnter(hit_object, collision_info)
  local collision_object = collision_info.collision_object
  if hit_object:hasTag(POKEMON_CARD_TAG) and hit_object.type == "Card" then
    if collision_object:hasTag(DAMAGE_TOKEN_TAG) then
      hit_object:addAttachment(collision_object)
    else
      evolution_events.on_collision_with_pokemon_card(hit_object, collision_object)
    end
  end
end
