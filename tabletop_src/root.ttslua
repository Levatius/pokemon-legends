#include config
#include utils

function onload()
  print("Root Loaded")
  math.randomseed(os.time())

  init_models()
end

--
--
--

-- Model Handling
function init_models()
  -- Do not allow players to mess with any models
  for _, object in pairs(getObjectsWithTag(POKEMON_MODEL_TAG)) do
    object.interactable = false
  end
  deduplicate_models()
end

function deduplicate_models()
  -- This method should not be necessary, but good to have just in case
  for _, object in pairs(getObjectsWithTag(POKEMON_MODEL_TAG)) do
    if object.type == "Bag" then
      local models_in_bag = {}
      for _, model in pairs(object:getObjects()) do
        if not models_in_bag[model.name] then
          models_in_bag[model.name] = 1
        else
          models_in_bag[model.name] = models_in_bag[model.name] + 1
          local model = object:takeObject({guid=model.guid})
          model:destroyObject()
        end
      end
    end
  end
end

--
--
--

function onObjectEnterZone(zone, object)
  if not zone or not object then return end
  -- Update Zones
  if zone:hasTag(UPDATE_PANELS_TAG) then
    update_panels(zone)
  end
  -- Hand Zones
  if zone.type == "Hand" then
    if object:hasTag(VILLAGE_CARD_TAG) then
      zone:setValue(object:getGMNotes())
    end
  end
  -- Pokemon Zones
  if zone:hasTag(POKEMON_ZONE_TAG) and object:hasTag(BALL_TOKEN_TAG) then
    -- Arena Special Case
    if zone:getName() == "Arena Pokemon Zone" then
      zone = getObjectFromGUID(zone:getVar("pokemon_zone_guid"))
      if not zone then
        return
      end
      -- if object:getDescription() then
      --   print("Go " .. object:getDescription() .. "!")
      -- end
    end

    local registered_zone_guid = object:getVar("registered_zone_guid")
    local registered_zone
    if registered_zone_guid then
      registered_zone = getObjectFromGUID(registered_zone_guid)
    end

    local zone_occupied = false
    for _, object_in_zone in pairs(zone:getObjects()) do
      if not object_in_zone:hasTag(BALL_TOKEN_TAG) then
        zone_occupied = true
      end
    end

    if not registered_zone then
      return
    elseif zone_occupied then
      return
    end

    for _, object_in_zone in pairs(registered_zone:getObjects()) do
      if not object_in_zone:hasTag(BALL_TOKEN_TAG) then
        local rotation_delta = zone:getRotation() - registered_zone:getRotation()
        local position_delta = object_in_zone:getPosition() - registered_zone:getPosition()
        position_delta:rotateOver("y", rotation_delta.y)
        object_in_zone:setPosition(zone:getPosition() + position_delta)
        object_in_zone:setRotation(object_in_zone:getRotation() + rotation_delta)
      end
    end
  end
end

function onObjectLeaveZone(zone, object)
  if not zone or not object then return end
  -- Update Zones
  if zone:hasTag(UPDATE_PANELS_TAG) then
    update_panels(zone)
  end
  -- Pokemon Zones
  if zone:hasTag(POKEMON_ZONE_TAG) and object:hasTag(BALL_TOKEN_TAG) then
    -- Arena Special Case
    if zone:getName() == "Arena Pokemon Zone" then
      zone = getObjectFromGUID(zone:getVar("pokemon_zone_guid"))
      if not zone then
        return
      end
    end

    -- Register Zone
    local pokemon_name
    for _, object_in_zone in pairs(zone:getObjects()) do
      if object_in_zone:hasTag(POKEMON_CARD_TAG) and not object_in_zone.is_face_down then
        pokemon_name = object_in_zone:getName()
      end
    end
    object:setVar("registered_zone_guid", zone:getGUID())
    if pokemon_name then
      object:setName(pokemon_name)
      object:setDescription("Flip over when the Pok√©mon faints.")
    end
  end
end

-- Container Events
function tryObjectEnterContainer(container, object)
  if container:hasTag(POKEMON_MODEL_TAG) then
    return object:hasTag(POKEMON_MODEL_TAG)
  elseif container:hasTag(APRICORN_TOKEN_TAG) and container:hasTag(JOURNEY_POINT_TOKEN_TAG) then
    return object:hasTag(APRICORN_TOKEN_TAG) or object:hasTag(JOURNEY_POINT_TOKEN_TAG)
  end
  return true
end

function onObjectEnterContainer(container, object)
  if container:hasTag(APRICORN_TOKEN_TAG) and container:hasTag(JOURNEY_POINT_TOKEN_TAG) then
    for _, bag_panel in pairs(getObjectsWithTag(BAG_PANEL_TAG)) do
      bag_panel:call("update_panel")
    end
  end
end

function onObjectLeaveContainer(container, object)
  if container:hasTag(APRICORN_TOKEN_TAG) and container:hasTag(JOURNEY_POINT_TOKEN_TAG) then
    for _, bag_panel in pairs(getObjectsWithTag(BAG_PANEL_TAG)) do
      bag_panel:call("update_panel")
    end
  end
end
