#include config
#include utils
#include events/arena
#include events/battle_token
#include events/evolution
#include events/music
#include events/player

local sort_coroutine_running = false

function onload()
  print("Root Loaded")
  for _, object in pairs(getObjectsWithTag(POKEMON_CARD_TAG)) do
    if object.type == "Card" then
      object:registerCollisions()
    end
  end
end

-- Scripting Zone Events
function onObjectEnterScriptingZone(zone, object)
  if object:getGUID() == -1 then return end
  if contains(ARENA_ACTIVE_ZONE_GUIDS, zone:getGUID()) then
    arena_events.on_enter_active_zone(zone, object)
  elseif contains(ARENA_BATTLE_TOKEN_GUIDS, zone:getGUID()) then
    battle_token_events.on_enter_zone(zone, object)
  elseif zone:hasTag(LAKE_CRYSTAL_TOKEN_TAG) then
    player_events.on_enter_lake_crystal_zone(zone, object)
  elseif zone:hasTag(MUSIC_CARTRIDGE_TAG) then
    music_events.on_enter_music_cartridge_zone(zone, object)
  elseif zone:getGUID() == ENCOUNTER_SORT_ZONE then
    function sortCoroutine()
      sort_coroutine_running = true
      local pokemon_card_infos = get_object_infos_from_zone_deck(zone)

      for _, pokemon_card_info in reversedipairs(pokemon_card_infos) do
        if contains(pokemon_card_info.tags, EVOLUTION_CARD_TAG) then
          local encounter_evolutuions_zone = getObjectFromGUID(ENCOUNTER_EVOLUTIONS_ZONE)
          take_object_from_zone_deck(zone, {
            position = encounter_evolutuions_zone:getPosition() + Vector(0, 5, 0),
            rotation = encounter_evolutuions_zone:getRotation(),
            guid     = pokemon_card_info.guid
          })
        elseif contains(pokemon_card_info.tags, LEGENDARY_TAG) then
          local encounter_special_zone = getObjectFromGUID(ENCOUNTER_SPECIAL_ZONE)
          take_object_from_zone_deck(zone, {
            position = encounter_special_zone:getPosition() + Vector(0, 5, 0),
            rotation = encounter_special_zone:getRotation(),
            guid     = pokemon_card_info.guid
          })
        else
          local biome_tag = get_biome_tag(pokemon_card_info.tags)
          local climate_tag = get_climate_tag(pokemon_card_info.tags)
          local x_offset = 2.9 * (find_first_index(BIOME_TAGS, biome_tag) - 3)
          local z_offset = -4.8 * (find_first_index(CLIMATE_TAGS, climate_tag) - 2)
          local encounter_regular_zone = getObjectFromGUID(ENCOUNTER_REGULAR_ZONE)
          take_object_from_zone_deck(zone, {
            position = encounter_regular_zone:getPosition() + Vector(x_offset, 5, z_offset),
            rotation = encounter_regular_zone:getRotation(),
            guid     = pokemon_card_info.guid
          })
        end
        brief_pause()
      end
      sort_coroutine_running = false
      return 1
    end
    if not sort_coroutine_running then startLuaCoroutine(self, "sortCoroutine") end
  end
end

function onObjectLeaveScriptingZone(zone, object)
  if object:getGUID() == -1 then return end
  if contains(ARENA_ACTIVE_ZONE_GUIDS, zone:getGUID()) then
    arena_events.on_leave_active_zone(zone, object)
  elseif contains(ARENA_BATTLE_TOKEN_GUIDS, zone:getGUID()) then
    battle_token_events.on_leave_zone(zone, object)
  elseif zone:hasTag(LAKE_CRYSTAL_TOKEN_TAG) then
    player_events.on_leave_lake_crystal_zone(zone, object)
  end
end

-- Container Events
function tryObjectEnterContainer(container, object)
  if container:hasTag(POKEMON_MODEL_TAG) then
    return object:hasTag(POKEMON_MODEL_TAG)
  end
  return true
end

function onObjectEnterContainer(container, object)
  if container:getName() == POUCH_NAME then
    player_events.on_enter_pouch(container)
  end
end

function onObjectLeaveContainer(container, object)
  if container:getName() == POUCH_NAME then
    player_events.on_leave_pouch(container)
  end
end

function onObjectEnterZone(zone, object)
  if zone:hasTag(POKEMON_CARD_TAG) and object:hasTag(POKEMON_CARD_TAG) and object.type == "Card" and not object.is_face_down then
    object:registerCollisions()
  end
end

-- Rotation Events
function onObjectRotate(object)
  if object:hasTag(POKEMON_CARD_TAG) and object.type == "Card" then
    arena_events.on_rotate_pokemon_card(object)
  elseif object:hasTag(STATUS_TOKEN_TAG) then
    arena_events.on_rotate_status_token(object)
  end
end

-- Collision Events
function onObjectCollisionEnter(hit_object, collision_info)
  local collision_object = collision_info.collision_object
  if hit_object:hasTag(POKEMON_CARD_TAG) and hit_object.type == "Card" then
    if collision_object:hasTag(DAMAGE_TOKEN_TAG) then
      hit_object:addAttachment(collision_object)
    else
      evolution_events.on_collision_with_pokemon_card(hit_object, collision_object)
    end
  end
end
