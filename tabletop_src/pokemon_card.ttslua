#include config
#include utils

local attack = base_attack
local defence = base_defence
local condition_state = 1
local loading_finished = false

function onLoad()
  self.createButton({
    click_function = "condition_button_toggle",
    function_owner = self,
    position       = {0.73, 0.3, -1.25},
    width          = 250,
    height         = 200,
    font_size      = 100,
    font_color     = DARK_COLOUR
  })
  self.createButton({
    click_function = "dummy_button",
    function_owner = self,
    position       = {0.73, 0.3, 0.95},
    width          = 0,
    height         = 0,
    font_size      = 150
  })
  self.createButton({
    click_function = "dummy_button",
    function_owner = self,
    position       = {0.73, 0.3, 1.2},
    width          = 0,
    height         = 0,
    font_size      = 150
  })
  loading_finished = true
  update_ui()
end

function dummy_button() end

function get_next_condition_state()
  return (condition_state % 3) + 1
end

function condition_button_toggle()
  condition_state = get_next_condition_state()
  update_ui()
end

function update_stats(zone)
  local attack_modifier = 0
  local defence_modifier = 0

  if zone then
    local status_tokens = find_objects_with_tag(zone, STATUS_TOKEN_TAG)
    for _, status_token in pairs(status_tokens) do
      if not status_token.is_face_down then
        if status_token:getName() == FOCUS_TOKEN_NAME then
          attack_modifier = attack_modifier + STATUS_MODIFIER
        elseif status_token:getName() == REINFORCE_TOKEN_NAME then
          defence_modifier = defence_modifier + STATUS_MODIFIER
        elseif status_token:getName() == FEAR_TOKEN_NAME then
          attack_modifier = attack_modifier - STATUS_MODIFIER
        elseif status_token:getName() == WEAKNESS_TOKEN_NAME then
          defence_modifier = defence_modifier - STATUS_MODIFIER
        end
      end
    end
  end

  attack = base_attack + attack_modifier
  defence = base_defence + defence_modifier
  update_ui()
end

function get_stat_font_colour(stat, base_stat)
  if stat > base_stat then return {50/255, 50/255, 200/255}
  elseif stat < base_stat then return {200/255, 50/255, 50/255}
  else return DARK_COLOUR end
end

function update_ui()
  if loading_finished then
    self.editButton({
      index       = 0,
      label       = CONDITION_LABEL[condition_state],
      color       = CONDITION_COLOUR[condition_state],
      hover_color = CONDITION_COLOUR[get_next_condition_state()],
      press_color = CONDITION_COLOUR[get_next_condition_state()],
      tooltip     = CONDITION_TOOLTIP[condition_state]
    })
    self.editButton({
      index      = 1,
      label      = attack,
      font_color = get_stat_font_colour(attack, base_attack)
    })
    self.editButton({
      index      = 2,
      label      = defence,
      font_color = get_stat_font_colour(defence, base_defence)
    })
  end
end
