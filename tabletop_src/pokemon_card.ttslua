#include config
#include utils

CONDITION_LABEL = {":)", ":(", "X("}
CONDITION_COLOUR = {{100/255, 250/255, 100/255}, {250/255, 200/255, 100/255}, {150/255, 150/255, 150/255}}
CONDITION_TOOLTIP = {"Healthy", "Injured", "Fainted"}

local condition_state = 1
local loading_finished = false

local status_token_guids_applied = {}

function onLoad()
  local condition_button_params = {
      click_function = "condition_button_toggle",
      function_owner = self,
      label          = CONDITION_LABEL[condition_state],
      position       = {0.73, 0.3, -1.25},
      width          = 250,
      height         = 200,
      font_size      = 100,
      color          = CONDITION_COLOUR[condition_state],
      hover_color    = CONDITION_COLOUR[get_next_condition_state(alt_click)],
      press_color    = CONDITION_COLOUR[get_next_condition_state(alt_click)],
      font_color     = DARK_COLOUR,
      tooltip        = CONDITION_TOOLTIP[condition_state]
    }
  self.createButton(condition_button_params)

  local attack_button_params = {
    click_function = "dummy_button",
    function_owner = self,
    label          = attack,
    position       = {0.73, 0.3, 0.95},
    width          = 0,
    height         = 0,
    font_size      = 150,
    font_color     = DARK_COLOUR
  }
  self.createButton(attack_button_params)

  local defence_button_params = {
    click_function = "dummy_button",
    function_owner = self,
    label          = defence,
    position       = {0.73, 0.3, 1.2},
    width          = 0,
    height         = 0,
    font_size      = 150,
    font_color     = DARK_COLOUR
  }
  self.createButton(defence_button_params)

  loading_finished = true
end

function dummy_button() end

function get_stat_font_colour(stat, base_stat)
  if stat > base_stat then
    return {50/255, 150/255, 50/255}
  elseif stat < base_stat then
    return {150/255, 50/255, 50/255}
  else
    return DARK_COLOUR
  end
end

function get_next_condition_state()
  return (condition_state % 3) + 1
end

function condition_button_toggle()
  condition_state = get_next_condition_state()

  self.editButton({
    index       = 0,
    label       = CONDITION_LABEL[condition_state],
    color       = CONDITION_COLOUR[condition_state],
    hover_color = CONDITION_COLOUR[get_next_condition_state()],
    press_color = CONDITION_COLOUR[get_next_condition_state()],
    tooltip     = CONDITION_TOOLTIP[condition_state]
  })
end

function update_stats_ui()
  if loading_finished then
    self.editButton({
      index      = 1,
      label      = attack,
      font_color = get_stat_font_colour(attack, base_attack)
    })
    self.editButton({
      index      = 2,
      label      = defence,
      font_color = get_stat_font_colour(defence, base_defence)
    })
  end
end

function onCollisionEnter(info)
  -- Check to see if this is a Status Token
  if not contains(info.collision_object:getTags(), STATUS_TOKEN_TAG) then
    return
  end
  local status_token = info.collision_object
  status_token:setRotation(self:getRotation())

  -- Check to see if this Status Token has already been applied
  if contains(status_token_guids_applied, status_token_guid) then
    return
  end

  if status_token:getName() == FOCUS_TOKEN_NAME then
    attack = attack + STATUS_MODIFIER
  elseif status_token:getName() == REINFORCE_TOKEN_NAME then
    defence = defence + STATUS_MODIFIER
  elseif status_token:getName() == FEAR_TOKEN_NAME then
    attack = attack - STATUS_MODIFIER
  elseif status_token:getName() == WEAKNESS_TOKEN_NAME then
    defence = defence - STATUS_MODIFIER
  else
    return
  end

  table.insert(status_token_guids_applied, status_token:getGUID())
  update_stats_ui()
end

function onCollisionExit(info)
  -- Check to see if this is a Status Token
  if not contains(info.collision_object:getTags(), STATUS_TOKEN_TAG) then
    return
  end
  local status_token = info.collision_object

  if status_token:getName() == FOCUS_TOKEN_NAME then
    attack = attack - STATUS_MODIFIER
  elseif status_token:getName() == REINFORCE_TOKEN_NAME then
    defence = defence - STATUS_MODIFIER
  elseif status_token:getName() == FEAR_TOKEN_NAME then
    attack = attack + STATUS_MODIFIER
  elseif status_token:getName() == WEAKNESS_TOKEN_NAME then
    defence = defence + STATUS_MODIFIER
  else
    return
  end

  index = find_first_index(status_token_guids_applied, status_token:getGUID())
  table.remove(status_token_guids_applied, index)
  update_stats_ui()
end
