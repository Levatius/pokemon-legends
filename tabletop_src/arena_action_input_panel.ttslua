#include config
#include utils

local selected_move_index
local selected_tactics_index = 1
local selected_switch_index

local action_output_panel = getObjectFromGUID(action_output_panel_guid)
local overview_panel = getObjectFromGUID(overview_panel_guid)
local model_bag = getObjectFromGUID(model_bag_guid)
local field_zone = getObjectFromGUID(field_zone_guid)

function onLoad()
  button_params = {
    function_owner = self,
    width          = 700,
    height         = 175,
    font_size      = 75,
    font_color     = DARK_COLOUR,
    hover_color    = LIGHT_BACKING_COLOUR,
    press_color    = LIGHT_BACKING_COLOUR
  }
  -- Move Buttons
  for i = 0, 2 do
    button_params.click_function = "move_button_select_" .. i
    button_params.position       = {0, 0.1, -0.6 + i * 0.35}
    button_params.tooltip        = "Select Attack"
    self:createButton(button_params)
  end
  -- Switch Button
  button_params.click_function = "switch_button_toggle"
  button_params.position       = {0, 0.1, 0.7}
  button_params.color          = {100/255, 200/255, 250/255}
  button_params.tooltip        = "Toggle Pokémon"
  self:createButton(button_params)

  update_panel()
end

--
--
--

-- Move Buttons
function move_button_select_0(_, _, alt_click) move_button_select(1, alt_click) end
function move_button_select_1(_, _, alt_click) move_button_select(2, alt_click) end
function move_button_select_2(_, _, alt_click) move_button_select(3, alt_click) end
function move_button_select(index, alt_click)
  selected_move_index = not alt_click and index or nil
  selected_switch_index = nil

  action_output_panel:call("set_selected_move_index", selected_move_index)
  update_panel()
end
-- Switch Button
function get_next_switch_state()
  local party_pokemons = get_party_pokemons()
  if not selected_switch_index or #party_pokemons == 0 then
    return 1
  end
  return (selected_switch_index % #party_pokemons) + 1
end
function switch_button_toggle(_, _, alt_click)
  selected_switch_index = not alt_click and get_next_switch_state() or nil
  selected_move_index = nil

  action_output_panel:call("set_selected_move_index", selected_move_index)
  update_panel()
end

--
--
--

function get_active_pokemon_from_zone_guid(zone_guid)
  local active_zone = getObjectFromGUID(zone_guid)
  for _, object in pairs(active_zone:getObjects()) do
    if object.type == "Card" then return object end
  end
end

function get_power(pokemon)
  if not pokemon then
    return 0
  end
  return pokemon:getVar("power")
end

function get_move_type(pokemon, move_index)
  if not pokemon or not pokemon:getVar("moves") then
    return nil
  end
  return pokemon:getVar("moves")[move_index]
end

function get_types(pokemon)
  if not pokemon then
    return nil
  end
  return pokemon:getVar("types")
end

function get_effectiveness(move_type, types)
  if not move_type then
    return nil
  end

  if not types then
    return 0
  end

  local effectiveness = 0
  for _, type in pairs(types) do
    effectiveness = effectiveness + (TYPE_CHART[move_type][type] and TYPE_CHART[move_type][type] or 0)
  end
  return effectiveness
end

function get_party_pokemons()
  local party_pokemons = {}
  local party_zone = getObjectFromGUID(party_zone_guid)
  for _, object in pairs(party_zone:getObjects()) do
    if object.type == "Card" then table.insert(party_pokemons, object) end
  end
  return party_pokemons
end

function get_selected_party_pokemon_name()
  local party_pokemons = get_party_pokemons()
  if #party_pokemons == 0 or not selected_switch_index then
    return nil
  end
  return party_pokemons[selected_switch_index]:getName()
end

--
--
--

function handle_models(our_pokemon)
  local models = field_zone:getObjects()
  if our_pokemon and #models == 0 then
    local model_guid = find_model_guid(our_pokemon)
    if model_guid then
      deploy_model(model_guid)
    end
  elseif not our_pokemon and #models > 0 then
    undeploy_models(models)
  end
end

function find_model_guid(our_pokemon)
  for _, contained_object in pairs(model_bag:getObjects()) do
    if contained_object.name == our_pokemon:getVar("internal_name") then
      return contained_object.guid
    end
  end
end

function deploy_model(model_guid)
  local model = model_bag:takeObject({
    position          = field_zone:getPosition(),
    rotation          = field_zone:getRotation(),
    guid              = model_guid,
    callback_function = function(model) deploy_model_callback(model) end
  })
  model.interactable = false
end

function deploy_model_callback(model)
end

function undeploy_models(models)
  for _, model in pairs(models) do
    model_bag:putObject(model)
  end
end

--
--
--

function update_move_buttons(button_index_offset, our_pokemon, their_pokemon)
  local effectiveness_list = {}
  local our_power = get_power(our_pokemon)
  local selected_effectiveness = 0

  local their_types = get_types(their_pokemon)
  for i = 0, 2 do
    local move_index = i + 1
    local move_type = get_move_type(our_pokemon, move_index)
    local effectiveness = get_effectiveness(move_type, their_types)

    self:editButton({
      index      = button_index_offset + i,
      label      = move_type and move_type or "",
      width      = move_type and 700 or 0,
      height     = move_type and 175 or 0,
      color      = move_type and TYPE_COLOURS[move_type] or LIGHT_BACKING_COLOUR,
      font_color = (move_index == selected_move_index) and WHITE_COLOUR or DARK_COLOUR
    })
    table.insert(effectiveness_list, effectiveness)
    if effectiveness and (move_index == selected_move_index) then
      selected_effectiveness = effectiveness
    end
  end

  Wait.frames(function() action_output_panel:call("set_effectiveness_list", effectiveness_list) end, 1)
  Wait.frames(function() overview_panel:call("set_power", our_power) end, 1)
  Wait.frames(function() overview_panel:call("set_effectiveness", selected_effectiveness) end, 1)
end

function update_switch_button(button_index_offset)
  local switch_name = get_selected_party_pokemon_name()
  self:editButton({
    index      = button_index_offset,
    label      = switch_name and switch_name or "Switch Pokémon",
    font_color = switch_name and WHITE_COLOUR or DARK_COLOUR
  })
end

--
--
--

function update_panel()
  local our_pokemon = get_active_pokemon_from_zone_guid(our_active_zone_guid)
  local their_pokemon = get_active_pokemon_from_zone_guid(their_active_zone_guid)

  update_move_buttons(0, our_pokemon, their_pokemon)
  update_switch_button(3)
  handle_models(our_pokemon)
end
